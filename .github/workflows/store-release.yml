name: Android Store Release (Auto)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # === Find project root & wrapper (or create one) =======================
      - name: Smart project detection + wrapper
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          echo "🔎 Detecting Android project root…"
          # 1) candidates: where there is settings.gradle[.kts]
          ROOT_CANDIDATE="$(git ls-files | grep -E '(^|.*/)(settings\.gradle(\.kts)?)$' | head -n1 || true)"
          if [ -n "${ROOT_CANDIDATE:-}" ]; then
            PROJECT_DIR="$(dirname "$ROOT_CANDIDATE")"
          else
            # 2) fallback: parent of an 'app/build.gradle[.kts]'
            APP_BUILD="$(git ls-files | grep -E '(^|.*/)(app/)(build\.gradle(\.kts)?)$' | head -n1 || true)"
            if [ -n "${APP_BUILD:-}" ]; then
              PROJECT_DIR="$(dirname "$(dirname "$APP_BUILD")")"
            else
              # 3) last resort: where AndroidManifest.xml lives (go up one level)
              MANIFEST="$(git ls-files | grep -E '(^|.*/)(AndroidManifest\.xml)$' | head -n1 || true)"
              if [ -n "${MANIFEST:-}" ]; then
                PROJECT_DIR="$(dirname "$MANIFEST")"
                # try to go up until we find a build.gradle / settings.gradle if possible
                for _ in 1 2 3; do
                  if [ -f "$PROJECT_DIR/build.gradle" ] || [ -f "$PROJECT_DIR/build.gradle.kts" ] \
                     || [ -f "$PROJECT_DIR/settings.gradle" ] || [ -f "$PROJECT_DIR/settings.gradle.kts" ]; then
                    break
                  fi
                  PROJECT_DIR="$(dirname "$PROJECT_DIR")"
                done
              else
                PROJECT_DIR="."
              fi
            fi
          fi

          # normalise
          PROJECT_DIR="${PROJECT_DIR:-.}"
          PROJECT_DIR="${PROJECT_DIR#./}"

          echo "Detected project dir: '$PROJECT_DIR'"
          echo "PROJECT_DIR=$PROJECT_DIR" >> "$GITHUB_OUTPUT"

          echo "🔎 Looking for gradlew…"
          GRADLEW_PATH="$(git ls-files | grep -E '(^|.*/)gradlew$' | head -n1 || true)"
          if [ -z "${GRADLEW_PATH:-}" ]; then
            echo "⚠️  No gradlew found — will install Gradle and generate wrapper."
            # install Gradle via SDKMAN and create wrapper in PROJECT_DIR
            curl -s "https://get.sdkman.io" | bash >/dev/null
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install gradle 8.7 >/dev/null
            pushd "$PROJECT_DIR" >/dev/null
            gradle wrapper
            popd >/dev/null
            GRADLEW_PATH="$PROJECT_DIR/gradlew"
          fi

          # make executable
          chmod +x "$GRADLEW_PATH"
          echo "GRADLEW=$GRADLEW_PATH" >> "$GITHUB_OUTPUT"
          echo "✅ gradlew ready at: $GRADLEW_PATH"

      # === Keystore (decode if secret exists) ================================
      - name: Prepare keystore
        shell: bash
        env:
          KS_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          set -euo pipefail
          if [ -n "${KS_B64:-}" ]; then
            echo "$KS_B64" | base64 -d > "$GITHUB_WORKSPACE/release.jks"
            echo "ANDROID_KEYSTORE=$GITHUB_WORKSPACE/release.jks" >> "$GITHUB_ENV"
            echo "🔐 Keystore decoded."
          else
            echo "ℹ️ No ANDROID_KEYSTORE_BASE64 provided — build will proceed unsigned if build.gradle allows."
          fi

      # === Build (auto-select task) =========================================
      - name: Build AAB (auto)
        shell: bash
        env:
          ANDROID_KEYSTORE: ${{ env.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          PROJECT_DIR="${{ steps.detect.outputs.PROJECT_DIR }}"
          GRADLEW="${{ steps.detect.outputs.GRADLEW }}"

          echo "📦 Project: $PROJECT_DIR"
          echo "🚀 GradleW: $GRADLEW"

          pushd "$PROJECT_DIR" >/dev/null

          # choose task: storeRelease if exists, else release
          if "$GRADLEW" :app:tasks --all | grep -q "^bundleStoreRelease"; then
            TASK=":app:bundleStoreRelease"
          else
            TASK=":app:bundleRelease"
          fi
          echo "Using task: $TASK"

          "$GRADLEW" $TASK --stacktrace --no-daemon
          popd >/dev/null

      # === Locate output AAB automatically ==================================
      - name: Locate AAB path
        id: out
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_DIR="${{ steps.detect.outputs.PROJECT_DIR }}"
          # try common locations
          CANDIDATES=()
          CANDIDATES+=("$PROJECT_DIR/app/build/outputs/bundle/storeRelease/app-store-release.aab")
          CANDIDATES+=("$PROJECT_DIR/app/build/outputs/bundle/release/app-release.aab")

          AAB=""
          for f in "${CANDIDATES[@]}"; do
            if [ -f "$f" ]; then AAB="$f"; break; fi
          done

          if [ -z "$AAB" ]; then
            # fallback: search
            AAB="$(find "$PROJECT_DIR/app/build/outputs/bundle" -type f -name '*.aab' | head -n1 || true)"
          fi

          if [ -z "$AAB" ]; then
            echo "❌ Could not find AAB. Available:"
            ls -R "$PROJECT_DIR/app/build/outputs" || true
            exit 1
          fi

          echo "AAB=$AAB" >> "$GITHUB_OUTPUT"
          echo "✅ Found AAB: $AAB"

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-store-release.aab
          path: ${{ steps.out.outputs.AAB }}
